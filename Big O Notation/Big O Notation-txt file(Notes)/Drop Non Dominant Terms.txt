def print_items(n):
    for i in range(n):
        for j in range(n):
            print(j)
    for k in range(n):
            print(k)

print_items(10)

in this case we can add one more loop which is having outside of second loop , so it's going to be separate loop.

we know that the time complexity for the first loop is O(n^2) and for the second loop is going to be O(n) time complexity.

when we run this code it will print 100 operations (starts with 0,0 and ends with 9,9) in my first loop while in second loop it will print 10 operations (starts with 0 and ends with 9)


when it comes to the total complexity of this function, it is going to be O(n^2+n) time complexity, but in terms of big O, we can go ahead and simplify this. so we are going to remove the non-dominant terms.

so the one which is going to be high is going to be dominant term and the one which is low is going to be the non-dominent term, 

so we know that O(n^2) is greater than n, so that's why it's going to be O(n^2) time complexity. so we can easily drop n over here.

so in this case in terms of if n was 100 or n squared is going to be 10000 and where the single n is going to add only over here 100.

write it like O(n^2) time complexity. so whenever you see that you have non-dominant terms in your time complexity, you can just go ahead and remove or drop that and you can simplify your time complexity like this.

so that's how we are dropping the non-dominant terms in case of Big O.
